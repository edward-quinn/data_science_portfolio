---
title: "Using Machine Learning to Predict Diabetes"
author: "Edward B. Quinn, PhD, MPH"
date: "Last Updated `r Sys.Date()`"
draft: false
categories: [R,Machine Learning,Health]
format: 
  html:
    toc: true
    toc-location: left
    toc-title: Contents
bibliography: references.bib
---

# Introduction

One of the most exciting applications of machine learning is in the prediction of disease states. Here, I demonstrate the use of a new modeling framework in R called `{tidymodels}` to compare multiple different types of machine learning models in their prediction of diabetes.

# The Data

The data come from the National Institute of Diabetes Digestive and Kidney Diseases [@smith1988]. There are 768 Pima Indian women included in the data set. Here's a list of the variables:

-   `Pregnancies` - Number of pregnancies

-   `Glucose` - Plasma glucose in mg/dl two hours after an oral glucose tolerance test

-   `BloodPressure` - Diastolic blood pressure in mm Hg

-   `SkinThickness` - Triceps skinfold thickness; a measure of body fat

-   `Insulin` - Two hour serum insulin

-   `BMI` - Body mass index

-   `DiabetesPedigreeFunction` - A measure of family history of diabetes

-   `Age` - Measured in years

-   `Outcome` - An indicator variable for diabetes diagnosis

# Exploratory Data Analysis

Let's load our libraries.

```{r}

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(RCurl))
suppressPackageStartupMessages(library(GGally))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(gtsummary))
suppressPackageStartupMessages(library(here))

# Deal with conflicting function names across packages:
tidymodels_prefer()

```

Read in the data and take a look at the numbers in @tbl-datatable. A .csv file containing the data can be downloaded [here](https://www.kaggle.com/datasets/uciml/pima-indians-diabetes-database/data).

```{r}
#| message: false
#| label: tbl-datatable
#| tbl-cap: Raw Data.

df <- read_csv(here("r_projects/r_machine_learning/diabetes.csv"))

datatable(df)

```

<br>

It is clear clicking on the filtering icons next to each variable name that there are some impossible values. For example, there are people with a BMI of zero. It is likely that missing values are encoded with a zero, so let's set values of zero for the variables `Glucose`, `BloodPressure`, `Insulin`, `BMI`, and `SkinThickness` equal to `NA` to indicate missingness.


```{r}

df <- df |> 
  mutate(across(c(Glucose,
                BloodPressure,
                Insulin,
                BMI,
                SkinThickness), ~na_if(.,0)))

```

Now that we have substituted `NA` for impossible values, let's take a look at some summary statistics for our data. 

```{r}

# The sample n column is broken.

df |> 
  summarise(across(colnames(df), .fns = 
                     list(n = ~sum(.x, na.rm = TRUE),
                          Mean = ~mean(.x, na.rm = TRUE),
                          Median = ~median(.x, na.rm = TRUE),
                          SD = ~sd(.x, na.rm = TRUE),
                          Min = ~min(.x, na.rm = TRUE),
                          Max = ~max(.x, na.rm = TRUE),
                          q25 = ~quantile(.x, 0.25, na.rm = TRUE), 
                          q75 = ~quantile(.x, 0.75, na.rm = TRUE)
                     ))) |>  
  pivot_longer(everything(), names_sep = "_", names_to = c("variable", ".value")) |> 
  mutate(across(where(is.numeric), .fns = ~round(.x, digits = 1))) |> 
  gt::gt()



```


Also, note that the outcome is encoded as 0 (no diabetes) and 1 (diabetes). Let's change this variable to a factor in R. This will facilitate data visualization.

```{r}

df <- df |> 
  mutate(Diagnosis = factor(Outcome, levels = c(0,1),
                          labels = c("No Diabetes","Diabetes")))

```

It is always a good idea to visualize the data as part of exploratory data analysis (@fig-pairs_plot).

```{r}
#| message: false
#| warning: false
#| fig-width: 10
#| fig-asp: 1
#| out-width: "100%"
#| label: fig-pairs_plot
#| fig-cap: Pairs plot for all variables in data set.


df |>
  # Don't need the "Outcome" column right now, use "Diagnosis" instead
  select(-Outcome) |>
  ggpairs(mapping = aes(color = Diagnosis, fill = Diagnosis)) +
  scale_color_brewer(type = "qual",
                     palette = "Accent") +
  scale_fill_brewer(type = "qual",
                     palette = "Accent") +
  theme_bw()





```

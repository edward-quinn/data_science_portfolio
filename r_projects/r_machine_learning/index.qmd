---
title: "Using Machine Learning to Predict Diabetes"
author: "Edward B. Quinn, PhD, MPH"
date: 07/30/2023
draft: false
categories: [R,Machine Learning,Health]
format: 
  html:
    toc: true
    toc-location: left
    toc-title: Contents
bibliography: references.bib
---

# Introduction

One of the most exciting applications of machine learning is in the prediction of disease states. Here, I demonstrate the use of a new modeling framework in R called `{tidymodels}` to compare multiple different types of machine learning models in their prediction of diabetes.

# The Data

The data come from the National Institute of Diabetes Digestive and Kidney Diseases [@smith1988]. There are 768 Pima Indian women included in the data set. Here's a list of the variables:

-   `Pregnancies` - Number of pregnancies

-   `Glucose` - Plasma glucose in mg/dl two hours after an oral glucose tolerance test

-   `BloodPressure` - Diastolic blood pressure in mm Hg

-   `SkinThickness` - Triceps skinfold thickness; a measure of body fat

-   `Insulin` - Two hour serum insulin

-   `BMI` - Body mass index

-   `DiabetesPedigreeFunction` - A measure of family history of diabetes

-   `Age` - Measured in years

-   `Outcome` - An indicator variable for diabetes diagnosis

# Exploratory Data Analysis

Let's load our libraries.

```{r}

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidymodels))
suppressPackageStartupMessages(library(RCurl))
suppressPackageStartupMessages(library(GGally))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(here))


tidymodels_prefer()

```

Read in the data and take a look at the numbers @tbl-datatable.

```{r}
#| message: false
#| label: tbl-datatable
#| tbl-cap: Raw Data

df <- read_csv(here("r_projects/r_machine_learning/diabetes.csv"))

datatable(df)

```

<br> <br>

It is clear clicking on the filtering icons next to each variable name that there are some impossible values. For example, there are people with a BMI of zero. It is likely that missing values are encoded with a zero, and this will need to be addressed later. Also, note that the outcome is encoded as 0 (no diabetes) and 1 (diabetes). Let's change this variable to a factor in R, so that it is interpreted as a binary variable.

```{r}

df <- df |> 
  mutate(Outcome = factor(Outcome, levels = c(0,1),
                          labels = c("No Diabetes","Diabetes")))

```










It is always a good idea to visualize the data as part of exploratory data analysis.

```{r}
#| message: false
#| fig-width: 12
#| fig-height: 8


ggpairs(df)


```



